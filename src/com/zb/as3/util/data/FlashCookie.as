package com.zb.as3.util.data{	import com.zbself.as3.framework.utils.SOLocalUtil;		import flash.net.SharedObject;
		/**	 * 快捷设置FlashCookie（SharedObject记录）	 */		final public class FlashCookie	{		private static const DEFAULT_COOKIENAME:String = "zbself.com/flashcookie";//Cookie默认名称		public function FlashCookie($sig:SingletonFlashCookie)		{		}		/**		 * 获取(创建) 缓存库名		 * @param $cookieName 库名(如果为空 则获取静态属性: FlashCookie.DEFAULT_COOKIENAME)		 * @return 		 */		private static function getCookie($cookieName:String=""):SOLocalUtil		{				if($cookieName=="" || $cookieName == null)				{					$cookieName = DEFAULT_COOKIENAME;				}			return SOLocalUtil.getSOUtil($cookieName);		}		/**		 * 快捷设置单一的SharedObject记录对象<br>		 * 库名/键值 相同会被覆盖 		 * @param propertyName 键值		 * @param value 数值		 * @param cookieName 库名(如果为空 则获取静态属性: FlashCookie.DEFAULT_COOKIENAME)		 * @return 		 */	    static public function save($key:String,$value:Object,$cookieName:String=""):void		{			getCookie($cookieName).save($value , $key);		}		/** 判断属性 存在		 * @param $key save()中的 key 键值		 * @param $cookieName 库名(如果为空 则获取静态属性: FlashCookie.DEFAULT_COOKIENAME)		 * @return 		 */		static public function has($key:String,$cookieName:String=""):Boolean		{			return getCookie($cookieName).has($key);		}		/**		 * 快捷获取 		 * @param $key save()中的 key 键值		 * @param cookieName 库名(如果为空 则获取静态属性: FlashCookie.DEFAULT_COOKIENAME)		 * @return 		 */		public static function get($key:String,$cookieName:String=''):*		{ 			return getCookie($cookieName).get($key);		}		 /**		  * 快捷清除 清除整个库名缓存记录		  * @param $cookieName 库名(如果为空 则获取静态属性: FlashCookie.DEFAULT_COOKIENAME)		  * @return 		  */		         public static function clear($cookieName:String=''):void		{			 getCookie($cookieName).clear();		}	}}class SingletonFlashCookie{};